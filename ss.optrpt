Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.3.199 Build 20190206

Compiler options: -I/usr/include/malloc/ -I/s/parsons/l/sys/intel/mkl/include/ -c -o ss.o -std=c99 -L/s/parsons/l/sys/intel/compilers_and_libraries/linux/mkl/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -L/s/parsons/l/sys/intel/compilers_and_libraries/linux/lib/intel64 -liomp5 -lm -qopenmp -O3 -xhost -lm -DSINGLE=1 -qopt-report-phase=vec -qopt-report=4 -g

Begin optimization report for: MM(float, float, long, long, long, long, float *, float *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ss.c(12,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ss.c(13,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ss.c(14,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ss.c(14,7)
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.580
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 8 
         remark #15451: unmasked unaligned unit stride stores: 16 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 152 
         remark #15477: vector cost: 17.870 
         remark #15478: estimated potential speedup: 6.460 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ss.c(14,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ss.c(13,5)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ss.c(14,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ss.c(14,7)
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.950
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15451: unmasked unaligned unit stride stores: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 38 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 5.890 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ss.c(14,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ss.c(12,3)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ss.c(13,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ss.c(14,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ss.c(14,7)
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference R[i*N+j] has unaligned access   [ ss.c(15,9) ]
         remark #15389: vectorization support: reference B[k*N+j] has unaligned access   [ ss.c(15,32) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 7.100 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at ss.c(14,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================
